'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var videojs = _interopDefault(require('video.js'));

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};











var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/* globals document localStorage */
var Plugin = videojs.getPlugin('plugin');
var buttonName = 'vjs-theater-container-button';

var config = {
  saveTheaterState: true,
  localItemName: 'theaterVideoState'
};

/** Class represents the TheaterToggle Plugin*/

var TheaterToggle = function (_Plugin) {
  inherits(TheaterToggle, _Plugin);

  /**
   * Create the plugin
   * @param {Player} player - a player to active the plugin
   * @param {JSON} options -  list of options to setting the plugin
   */
  function TheaterToggle(player, options) {
    classCallCheck(this, TheaterToggle);

    var _this = possibleConstructorReturn(this, _Plugin.call(this, player, options));

    if (typeof options === 'undefined') {
      options = config;
    } else {
      options.saveTheaterState = typeof options.saveTheaterState === 'undefined' ? config.saveTheaterState : options.saveTheaterState;
      options.localItemName = typeof options.localItemName === 'undefined' ? config.localItemName : options.localItemName;
    }
    _this.on(player, 'timeupdate', _this.isTheater);

    var buttonElement = document.createElement('button');

    buttonElement.className = buttonName;

    if (options.saveTheaterState) {
      if (typeof Storage !== 'undefined') {
        if (localStorage.getItem(options.localItemName) !== null) {
          var storage = localStorage.getItem(options.localItemName);

          if (storage === 'enabled') {
            buttonElement.classList.add('theater-toggled');
          }
        }
      } else {
        videojs.log('Sorry! No Web Storage support...');
      }
    } else {
      var localStore = localStorage.getItem(options.localItemName);

      if (localStore !== null) {
        localStorage.removeItem(options.localItemName);
      }
    }

    player.on('ready', function () {
      player.trigger('theaterMode', _this.theaterMode);
    });

    // Adding or removing when is fullscreen
    player.on('fullscreenchange', function (event) {
      var buttonEl = document.getElementsByClassName(buttonName)[0];

      if (player.isFullscreen()) {
        buttonEl.classList.add('vjs-hidden');
      } else {
        buttonEl.classList.remove('vjs-hidden');
      }
    });

    var iconElement = document.createElement('span');

    iconElement.textContent = 'Theater';
    buttonElement.appendChild(iconElement);

    player.controlBar.el().insertBefore(buttonElement, player.controlBar.fullscreenToggle.el());
    player.controlBar.addChild(buttonElement);
    player.addClass('vjs-theater-toggle');

    document.getElementsByClassName(buttonName)[0].onclick = function () {
      if (this.classList.contains('theater-toggled')) {
        this.classList.remove('theater-toggled');
        localStorage.setItem(options.localItemName, 'disabled');
      } else {
        this.classList.add('theater-toggled');
        localStorage.setItem(options.localItemName, 'enabled');
      }
      player.trigger('theaterMode', this.theaterMode);
    };
    return _this;
  }

  /** Triggered by click on button
   * @return {boolean} - isTheater() response
   */


  TheaterToggle.prototype.theaterMode = function theaterMode() {
    return this.isTheater();
  };

  /** Check if the Toggle is active
   * @return {boolean} - the response
   */


  TheaterToggle.prototype.isTheater = function isTheater() {
    var buttonDiv = document.getElementsByClassName(buttonName)[0];

    return buttonDiv.classList.contains('theater-toggled');
  };

  return TheaterToggle;
}(Plugin);

videojs.registerPlugin('theaterToggle', TheaterToggle);

module.exports = TheaterToggle;
